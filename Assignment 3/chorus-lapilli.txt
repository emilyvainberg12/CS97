Chorus lapilli is a game that is very similar to tic-tac-toe, with a few concrete changes. So to create this app, first follow the instructors for setting up a tic-tac-toe game and then make the following changes. To create the tic-tac-toe game, follow the instructions listed in the tic-tac-toe.txt. 
The first main difference is that after the first three moves, instead of adding more pieces to the board, the players move their current pieces around to try to get 3 in a row. There are a few things necessary to implement this. The first step is to add variables that keep track of the count of Xs and Os. I added this in the Game class that extends the React.Component. Also include another variable of the piece that is moving (that will be used later). Now for the moving of pieces, there needs to be a function created to check if the box the player chooses is a valid move. Similar to how you created a winner function, create a function that checks if the moves are valid. My function had two parameters, the current position and the new position. I wrote out a list of constant lines with the position number of possible moves. If the new position matches up with a possibility of the prev position, it means that the move is valid. The syntax I used for this was:   for (let i = 0; i < moves[curMove].length; i++) { if (nextMove === moves[curMove][i]) { return true; } }
The rest of the code will go into the handleClick(i). Declare two additional variables that track the current position and the center position. 
Then create a few if statements so the game will know when to preform what. If both the X and O have counts less than zero, simply add the shapes into the squares and increment the count. However, once they place three shapes on the board, you must code for the moving of squares. If there is a winner, simply return. Now simply make sure that the square is empty, do this by simply coding if (squares[i]) { return; } and that the move is valid by calling the helper function created. Another situation is if you have to force the player to vacate the center because they are not about to win. You have to set the moving piece to null and set the current piece to the middle of the boar and force that to be put through the valid position. The tic-tac-toe instructions already call for calling a winner and updating the moves so you don't need to worry about any of that if you implemented the tic-tac-toe correctly the first time. 
